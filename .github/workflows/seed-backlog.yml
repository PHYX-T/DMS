name: Seed Backlog

on:
  workflow_dispatch: {}

permissions:
  issues: write
  contents: read

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create milestones, labels, and issues from .github/backlog.json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/backlog.json';
            const data = JSON.parse(fs.readFileSync(path, 'utf8'));

            // Ensure milestone map (title -> number)
            const existingMilestones = await github.paginate(github.rest.issues.listMilestones, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            const milestoneMap = new Map(existingMilestones.map(m => [m.title, m.number]));

            for (const m of data.milestones || []) {
              if (!milestoneMap.has(m.title)) {
                const created = await github.rest.issues.createMilestone({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: m.title,
                  description: m.description || ''
                });
                milestoneMap.set(created.data.title, created.data.number);
              }
            }

            // Ensure labels
            const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const labelSet = new Set(existingLabels.map(l => l.name));
            const desired = new Set(["bug","enhancement","task","ci","database","test","files","search","reporting","notifications","sso","security","performance","ops","M0","M1","M2","M3","M4","M5","M6"]);
            for (const name of desired) {
              if (!labelSet.has(name)) {
                await github.rest.issues.createLabel({ owner: context.repo.owner, repo: context.repo.repo, name });
                labelSet.add(name);
              }
            }

            // Existing issues by title to avoid duplicates
            const existingIssues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });
            const byTitle = new Set(existingIssues.map(i => i.title));

            for (const issue of data.issues || []) {
              if (byTitle.has(issue.title)) continue; // skip duplicates by title
              const milestoneNumber = milestoneMap.get(issue.milestone) || undefined;
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issue.title,
                body: issue.body || '',
                labels: issue.labels || [],
                milestone: milestoneNumber
              });
            }

