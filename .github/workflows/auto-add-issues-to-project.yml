name: Auto-Add Issues to Project

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: read

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add issue to GitHub Project (Projects v2)
        if: ${{ vars.PROJECT_V2_NUMBER != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const projectNumber = Number(process.env.PROJECT_V2_NUMBER || core.getInput('PROJECT_V2_NUMBER'));
            if (!projectNumber || !issue?.node_id) {
              core.info('PROJECT_V2_NUMBER not set or issue node_id missing; skipping');
              return;
            }

            const login = context.repo.owner;
            let projectId = null;
            try {
              const orgRes = await github.graphql(`
                query($login:String!, $number:Int!){
                  organization(login:$login){ projectV2(number:$number){ id } }
                }
              `, { login, number: projectNumber });
              projectId = orgRes?.organization?.projectV2?.id || null;
            } catch (e) {
              core.info('Org project lookup failed (may be a user repo).');
            }

            if (!projectId) {
              try {
                const userRes = await github.graphql(`
                  query($login:String!, $number:Int!){
                    user(login:$login){ projectV2(number:$number){ id } }
                  }
                `, { login, number: projectNumber });
                projectId = userRes?.user?.projectV2?.id || null;
              } catch (e) {
                core.info('User project lookup also failed.');
              }
            }

            if (!projectId) {
              core.info(`Could not resolve project by number ${projectNumber} for owner ${login}.`);
              return;
            }

            // Add the issue to the project
            const mutation = `
              mutation($projectId:ID!, $contentId:ID!){
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){
                  item { id }
                }
              }
            `;
            await github.graphql(mutation, {
              projectId,
              contentId: issue.node_id,
            });
            core.info(`Added issue #${issue.number} to project ${projectNumber}`);

